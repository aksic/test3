index:
<tr>
            <td><b>Name</b></td> 
            <td><input type='text' name='name' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn Location</b></td> 
            <td><input type='text' name='svnLocation' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn User Name</b></td> 
            <td><input type='text' name='svnUserName' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn Password</b></td> 
            <td><input type="password" name='svnPassword' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Git Location</b></td> 
            <td><input type='text' name='gitLocation' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Git User Name</b></td> 
            <td><input type='text' name='gitUserName' class='form-control'  required/></td>
        </tr>
        <tr>
            <td><b>Git Password</b></td> 
            <td><input type="password" name='gitPassword' class='form-control'  required/></td>
        </tr>
        <tr>
eidt:
 <tr>
            <td><b>Name</b></td>
            <td><input type='text' name='name' class='form-control' value="${model.name}" /></td>
        </tr>
         <tr>
            <td><b>Svn Location</b></td> 
            <td><input type='text' name='svnLocation' class='form-control'  value="${model.svnLocation}"/></td>
        </tr>
         <tr>
            <td><b>Svn User Name</b></td> 
            <td><input type='text' name='svnUserName' class='form-control'  value="${model.svnUserName}"/></td>
        </tr>
         <tr>
            <td><b>Svn Password</b></td> 
            <td><input type="password" name='svnPassword' class='form-control'  value="${model.svnPassword}"/></td>
        </tr>
         <tr>
            <td><b>Git Location</b></td> 
            <td><input type='text' name='gitLocation' class='form-control'  value="${model.gitLocation}"/></td>
        </tr>
         <tr>
            <td><b>Git User Name</b></td> 
            <td><input type='text' name='gitUserName' class='form-control'  value="${model.gitUserName}"/></td>
        </tr>
        <tr>
            <td><b>Git Password</b></td> 
            <td><input type="password" name='gitPassword' class='form-control'  value="${model.gitPassword}"/></td>
        </tr>


model:
package net.emisia.svn2git.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
public class Model {

	private Integer _id;
	private String _name;
	private String _svnLocation;
	private String _svnUserName;
	private String _svnPassword;
	private String _gitLocation;
	private String _gitUserName;
	private String _gitPassword;

	public Model(Integer id, String name, String svnLocation, String svnUserName, String svnPassword,
			String gitLocation, String gitUserName, String gitPassword) {
		super();
		_id = id;
		_name = name;
		_svnLocation = svnLocation;
		_svnUserName = svnUserName;
		_svnPassword = svnPassword;
		_gitLocation = gitLocation;
		_gitUserName = gitUserName;
		_gitPassword = gitPassword;
	}

	public String getSvnLocation() {
		return _svnLocation;
	}

	public void setSvnLocation(String svnLocation) {
		_svnLocation = svnLocation;
	}

	public String getSvnUserName() {
		return _svnUserName;
	}

	public void setSvnUserName(String svnUserName) {
		_svnUserName = svnUserName;
	}

	public String getSvnPassword() {
		return _svnPassword;
	}

	public void setSvnPassword(String svnPassword) {
		_svnPassword = svnPassword;
	}

	public String getGitLocation() {
		return _gitLocation;
	}

	public void setGitLocation(String gitLocation) {
		_gitLocation = gitLocation;
	}

	public String getGitUserName() {
		return _gitUserName;
	}

	public void setGitUserName(String gitUserName) {
		_gitUserName = gitUserName;
	}

	public String getGitPassword() {
		return _gitPassword;
	}

	public void setGitPassword(String gitPassword) {
		_gitPassword = gitPassword;
	}

	public Model() {
		super();
	}

	public Model(Integer id, String name) {
		super();
		_id = id;
		_name = name;
	}

	public Integer getId() {
		return _id;
	}

	public String getName() {
		return _name;
	}

	public void setId(Integer id) {
		_id = id;
	}

	public void setName(String name) {
		_name = name;
	}

	@Override
	public String toString() {
		return "Model [_id=" + _id + ", _name=" + _name + ", _svnLocation=" + _svnLocation + ", _svnUserName="
				+ _svnUserName + ", _svnPassword=" + _svnPassword + ", _gitLocation=" + _gitLocation + ", _gitUserName="
				+ _gitUserName + ", _gitPassword=" + _gitPassword + "]";
	}

}
service:

public List<Model> saveEntry(String name, String svnLocation, String svnUserName, String svnPassword,
			String gitLocation, String gitUserName, String gitPassword);

	public List<Model> updateEntry(Integer id, String name, String svnLocation, String svnUserName, String svnPassword,
			String gitLocation, String gitUserName, String gitPassword);

serviceImpl:

@Override
	public List<Model> saveEntry(String name, String svnLocation, String svnUserName, String svnPassword,
			String gitLocation, String gitUserName, String gitPassword) {

		List<Model> modelList = readFromXml();
		Integer pomId = 1;
		if (modelList.size() > pomId) {
			pomId = modelList.get(modelList.size() - 1).getId() + 1;
		}
		Model newModel = new Model(pomId, name, svnLocation, svnUserName, svnPassword, gitLocation, gitUserName,
				gitPassword);
		modelList.add(newModel);
		writeToXml(modelList);
		return modelList;
	}

@Override
	public List<Model> updateEntry(Integer id, String name, String svnLocation, String svnUserName, String svnPassword,
			String gitLocation, String gitUserName, String gitPassword) {
		List<Model> modelList = readFromXml();
		modelList.stream().filter(model -> model.getId().equals(id)).findFirst().ifPresent(item -> {
			item.setName(name);
			item.setSvnLocation(svnLocation);
			item.setSvnUserName(svnUserName);
			item.setSvnPassword(svnPassword);
			item.setGitLocation(gitLocation);
			item.setGitUserName(gitUserName);
			item.setGitPassword(gitPassword);
		});
		writeToXml(modelList);
		return modelList;
	}

controller:

@RequestMapping(value = "/add", method = RequestMethod.POST)
	public ModelAndView newEntryRegister(@RequestParam("name") String name,
			@RequestParam("svnLocation") String svnLocation, @RequestParam("svnUserName") String svnUserName,
			@RequestParam("svnPassword") String svnPassword, @RequestParam("gitLocation") String gitLocation,
			@RequestParam("gitUserName") String gitUserName, @RequestParam("gitPassword") String gitPassword) {
		ModelAndView modelAndView = new ModelAndView("index");
		if (name != null) {
			List<Model> newList = getModelService().saveEntry(name, svnLocation, svnUserName, svnPassword, gitLocation,
					gitUserName, gitPassword);
			// List<Model> newList = getModelService().saveEntry(name);
			modelAndView.addObject("list", newList);
			modelAndView.addObject("warning", "Registration Success");
		} else {
			modelAndView.addObject("error", "Something went Bad");
		}
		return modelAndView;
	}

@RequestMapping(value = "/update", method = RequestMethod.GET)
	public ModelAndView update(@RequestParam("id") Integer id, @RequestParam("name") String name,
			@RequestParam("svnLocation") String svnLocation, @RequestParam("svnUserName") String svnUserName,
			@RequestParam("svnPassword") String svnPassword, @RequestParam("gitLocation") String gitLocation,
			@RequestParam("gitUserName") String gitUserName, @RequestParam("gitPassword") String gitPassword) {
		List<Model> newList = getModelService().updateEntry(id, name, svnLocation, svnUserName, svnPassword,
				gitLocation, gitUserName, gitPassword);
		ModelAndView modelAndView = new ModelAndView("index");
		modelAndView.addObject("model", newList);
		return new ModelAndView("forward:/index");
	}

	private ModelService getModelService() {
		return _modelService;
	}\



logging.level.net.emisia.svn2git..Svn2GitApplication = info
	
   // private String _filePath = ClassLoader.getSystemClassLoader().getResource(".").getPath() + "Data.xml";-? ne radi

    //private File _file = new File(getClass().getClassLoader().getResource("data/Model.xml").getFile());pokupi lokaciju
	
	 //Mockito.verify(getModelServiceMock(), Mockito.times(1)).saveEntry(newModel); mokovanje


// modelList.stream().filter(model ->
	// model.getId().equals(id)).findFirst().ifPresent(item -> {
	// modelList.remove(item);
	// });-stream za nalazenje i brisanje elementa




index:


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<jsp:include page="header.jsp"></jsp:include>

<h3>Registration</h3>
<br>
<form action='/index/add' method='post' enctype="application/json">

	<table class='table table-hover table-responsive table-bordered'>

		<tr>
            <td><b>Name</b></td> 
            <td><input type='text' name='name' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn Location</b></td> 
            <td><input type='text' name='svnLocation' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn User Name</b></td> 
            <td><input type='text' name='svnUserName' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Svn Password</b></td> 
            <td><input type="password" name='svnPassword' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Git Location</b></td> 
            <td><input type='text' name='gitLocation' class='form-control'  required/></td>
        </tr>
         <tr>
            <td><b>Git User Name</b></td> 
            <td><input type='text' name='gitUserName' class='form-control'  required/></td>
        </tr>
        <tr>
            <td><b>Git Password</b></td> 
            <td><input type="password" name='gitPassword' class='form-control'  required/></td>
        </tr>
        <tr>
		<tr>
			<td></td>
			<td>
				<button type="submit" class="btn btn-primary">Register</button>
			</td>
		</tr>

	</table>
	<b><c:out value="${error}"></c:out></b>
</form>



<h3>List Of Entries</h3>
<br>
<table class="table table-hover">

	<thead>
		<tr>
			<th><b> Name</b></th>
		</tr>
	</thead>
	<tbody>
		<c:forEach items="${list}" var="model">
			<tr>
				<td><c:out value="${model.name}"></c:out>
				</td>
				<td><a href="/index/${model.id}/edit">
						<button type="submit" class="btn btn-primary">Edit Entry</button>
				</a></td>
				<td><a href="/index/${model.id}/delete">
						<button type="submit" class="btn btn-primary">Delete
							Entry</button>
				</a></td>
			</tr>

		</c:forEach>
	</tbody>
</table>
</div>

<jsp:include page="footer.jsp"></jsp:include>



    private static String decryptText(byte[] byteCipherText, SecretKey secKey) throws Exception {
	Cipher aesCipher = Cipher.getInstance("AES");
	aesCipher.init(Cipher.DECRYPT_MODE, secKey);
	byte[] bytePlainText = aesCipher.doFinal(byteCipherText);
	return new String(bytePlainText);
    }--decodovanje passworda




	<!-- <parent> -->
	<!-- <groupId>org.springframework.boot</groupId> -->
	<!-- <artifactId>spring-boot-starter-parent</artifactId> -->
	<!-- <version>1.5.8.RELEASE</version> -->
	<!-- <relativePath /> -->
	<!-- </parent> -->-- spring boot parent






hiberntae:
CREATE  TABLE users (
  username VARCHAR(45) NOT NULL ,
  password VARCHAR(60) NOT NULL ,
  enabled TINYINT NOT NULL DEFAULT 1 ,
  PRIMARY KEY (username));

CREATE TABLE user_roles (
  user_role_id int(11) NOT NULL AUTO_INCREMENT,
  username varchar(45) NOT NULL,
  role varchar(45) NOT NULL,
  PRIMARY KEY (user_role_id),
  UNIQUE KEY uni_username_role (role,username),
  KEY fk_username_idx (username),
  CONSTRAINT fk_username FOREIGN KEY (username) REFERENCES users (username));


